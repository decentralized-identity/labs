let currentCohort="beta-cohort-2",peopleData=null;async function fetchPeople(){try{const e=await fetch("/data/directory.json");if(!e.ok)throw new Error(`Failed to fetch people data: ${e.statusText}`);return await e.json()}catch(e){return console.error("Error fetching people data:",e),alert("Failed to load people data. Please try again later."),null}}function createCohortTabs(e){const t=document.getElementById("cohortTabs");if(t.innerHTML="",!e||!e.cohorts){console.error("Invalid data structure:",e),t.innerHTML="<p>Error loading cohort data</p>";return}const n=Object.keys(e.cohorts);n.sort((e,t)=>e==="beta-cohort-2"?-1:t==="beta-cohort-2"?1:e.localeCompare(t)),n.forEach(n=>{const o=e.cohorts[n],s=document.createElement("button");s.className=`cohort-tab ${n===currentCohort?"active":""}`,s.textContent=o.name,s.onclick=()=>switchCohort(n),t.appendChild(s)})}function switchCohort(e){currentCohort=e,document.querySelectorAll(".cohort-tab").forEach(e=>{e.classList.remove("active")}),event.target.classList.add("active"),displayCohortContent(peopleData.cohorts[e])}function displayCohortContent(e){const t=document.getElementById("cohortContent");if(t.innerHTML="",!e){console.error("No cohort data provided"),t.innerHTML="<p>No cohort data available</p>";return}const n=["mentors","chairs","leads"],s={mentors:"Expert Mentors",chairs:"Chairs",leads:"Project Leads"};n.forEach(n=>{if(e[n]&&e[n].length>0){const o=document.createElement("div");o.className="role-section";const a=document.createElement("h2");a.id=n,a.textContent=s[n],o.appendChild(a);const i=document.createElement("div");i.className="avatar-grid",i.id=`${n}-grid`,populateGrid(e[n],i),o.appendChild(i),t.appendChild(o)}})}function populateGrid(e,t){t.innerHTML="",e.forEach(e=>{const n=document.createElement("div");n.className="avatar-card",n.innerHTML=`
            <img src="${e.img}" alt="${e.name}" 
                 onerror="this.style.display='none'; this.insertAdjacentHTML('afterend', \`
                 <span class='material-icons' style='font-size: 80px; color: #666;'>person</span>\`);">
            <h3>${e.name}</h3>
            <p>${e.role}</p>
        `,n.addEventListener("click",()=>openModal(e)),t.appendChild(n)})}function openModal(e){const s=document.getElementById("modalName"),o=document.getElementById("modalRole"),i=document.getElementById("modalOverlay"),a=document.getElementById("infoModal"),t=document.getElementById("modalProfileLink"),n=document.getElementById("modalImg");s.innerText=e.name||"No name available",o.innerText=e.role||"No role specified",e.img?(n.src=e.img,n.style.display="block"):n.style.display="none",e.profile_url?(t.href=e.profile_url,t.style.display="inline"):t.style.display="none",i.style.display="block",a.style.display="block"}function closeModal(){const e=document.getElementById("modalOverlay"),t=document.getElementById("infoModal");e.style.display="none",t.style.display="none"}function filterAvatars(){const e=document.getElementById("searchInput").value.toLowerCase();document.querySelectorAll(".avatar-card").forEach(t=>{const n=t.innerText.toLowerCase();t.style.display=n.includes(e)?"block":"none"})}(async function(){try{const e=await fetchPeople();if(e)if(e.cohorts?peopleData=e:(console.log("Converting old data format to new cohort format"),peopleData={cohorts:{"beta-cohort-1":{name:"Beta Cohort 1",mentors:e.mentors||[],chairs:e.chairs||[],leads:e.leads||[]}}},currentCohort="beta-cohort-1"),createCohortTabs(peopleData),peopleData.cohorts[currentCohort])displayCohortContent(peopleData.cohorts[currentCohort]);else{console.error("Current cohort not found in data:",currentCohort);const e=Object.keys(peopleData.cohorts)[0];e&&(currentCohort=e,displayCohortContent(peopleData.cohorts[e]))}else console.error("No data received from server");const t=document.getElementById("modalOverlay");t&&t.addEventListener("click",closeModal)}catch(e){console.error("Error initializing directory:",e)}})()